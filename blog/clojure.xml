<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://carmenla.me/' rel='self' type='application/rss+xml'/>
<title>
Carmen La
</title>
<link>
http://carmenla.me/
</link>
<description>
Carmen's Blog
</description>
<lastBuildDate>
Sat, 27 Apr 2019 16:52:04 -0400
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://carmenla.me/blog/2016-06-11-scraping-youtube-haikus/
</guid>
<link>
http://carmenla.me/blog/2016-06-11-scraping-youtube-haikus/
</link>
<title>
Scraping Youtube Haikus from Reddit
</title>
<description>
&lt;p&gt;While browsing Reddit the other day, I stumbled upon &lt;a href='https://www.reddit.com/r/youtubehaiku'&gt;/r/youtubehaiku&lt;/a&gt;. As with any seemingly popular subreddit that I discover, I decided to check out the top posts. The next day I showed the subreddit to my coworker and jokingly suggested that he write a script to scrape the links from Reddit and create a YouTube playlist from them. We spent the next couple of hours doing just that. Here's how I wrote mine.&lt;/p&gt;&lt;h2 id=&quot;the&amp;#95;setup&quot;&gt;The Setup&lt;/h2&gt;&lt;p&gt;I used the &lt;code&gt;app&lt;/code&gt; template as the base of the project by running the following command in the terminal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new app youtubehaikus
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I knew I'd need dependencies for making http requests, encoding/decoding JSON, and URL parsing so I added the relevant libraries to my &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
               &amp;#91;clj-http &amp;quot;2.2.0&amp;quot;&amp;#93;
               &amp;#91;cheshire &amp;quot;5.6.1&amp;quot;&amp;#93;
               &amp;#91;com.cemerick/url &amp;quot;0.1.1&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, I created a new playlist on YouTube and &lt;a href='https://developers.google.com/youtube/v3/guides/auth/server-side-web-apps'&gt;created an OAuth 2.0 access token&lt;/a&gt;. These tokens expire after 60 minutes.&lt;/p&gt;&lt;h2 id=&quot;getting&amp;#95;the&amp;#95;reddit&amp;#95;post&amp;#95;data&quot;&gt;Getting the Reddit Post Data&lt;/h2&gt;&lt;p&gt;&lt;a href='https://www.reddit.com/dev/api#GET_top'&gt;This&lt;/a&gt; is the Reddit API endpoint that we want to use to get the post data. To get the first 100 top posts of all time, we need to specify the query params &lt;code&gt;t=all&lt;/code&gt; and &lt;code&gt;limit=100&lt;/code&gt; in our request. If you specify the &lt;code&gt;after=FULLNAME&lt;/code&gt; param then you can retrieve data about posts that come after a certain post. I be using this optional parameter in order to scrape more than just the top 100 posts of all time.&lt;/p&gt;&lt;p&gt;We'll start by defining our endpoint as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;def reddit-url &amp;quot;https://www.reddit.com/r/youtubehaiku/top.json?t=all&amp;amp;limit=100&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The body of the response looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:kind &amp;quot;Listing&amp;quot;,
 :data {:modhash &amp;quot;&amp;quot;,
        :children &amp;#91;...&amp;#93;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The post data is stored under the &lt;code&gt;:children&lt;/code&gt; key so we'll want to retrieve that:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;-&amp;gt; reddit-url
    &amp;#40;http/get {:headers {&amp;quot;User-Agent&amp;quot; &amp;quot;thing by /u/me&amp;quot;
                         &amp;quot;Accept&amp;quot;     &amp;quot;application/json&amp;quot;}}&amp;#41;
    :body
    &amp;#40;json/parse-string true&amp;#41;
    &amp;#40;get-in &amp;#91;:data :children&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we want to extract the YouTube video ids from the links in the posts. Each object in the &lt;code&gt;:children&lt;/code&gt; vector is structured like so:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:kind &amp;quot;t3&amp;quot;,
  :data { ...
         :url &amp;quot;...&amp;quot;
         :name &amp;quot;t3&amp;#95;...&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and we'll obtain the video ids as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn get-path &amp;#91;{:keys &amp;#91;host path query&amp;#93;}&amp;#93;
  &amp;#40;if &amp;#40;= &amp;quot;youtu.be&amp;quot; host&amp;#41;
    &amp;#40;subs path 1&amp;#41;
    &amp;#40;or &amp;#40;get query &amp;quot;v&amp;quot;&amp;#41;
        &amp;#40;get query &amp;quot;amp;v&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;map #&amp;#40;-&amp;gt; % &amp;#40;get-in &amp;#91;:data :url&amp;#93;&amp;#41; url get-path&amp;#41; post-data&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;creating&amp;#95;the&amp;#95;playlist&quot;&gt;Creating the Playlist&lt;/h2&gt;&lt;p&gt;The last step is to iterate through the video ids and add them to our playlist using the &lt;a href='https://developers.google.com/youtube/v3/docs/playlistItems/insert'&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However, I wanted to scrape the top 500 videos so I did that by using &lt;code&gt;loop/recur&lt;/code&gt; and the &lt;code&gt;after&lt;/code&gt; query param in the Reddit endpoint. The &lt;code&gt;FULLNAME&lt;/code&gt; that you want to use as the &lt;code&gt;after&lt;/code&gt; param is the value associated with the &lt;code&gt;:name&lt;/code&gt; key in the last entry of the post data.&lt;/p&gt;&lt;p&gt;Putting it all together, this was my entire namespace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns youtubehaikus.core
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;clj-http.client :as http&amp;#93;
            &amp;#91;cheshire.core :as json&amp;#93;
            &amp;#91;cemerick.url :refer &amp;#91;url&amp;#93;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;def reddit-url &amp;quot;https://www.reddit.com/r/youtubehaiku/top.json?t=all&amp;amp;limit=100&amp;quot;&amp;#41;

&amp;#40;defn get-path &amp;#91;{:keys &amp;#91;host path query&amp;#93;}&amp;#93;
  &amp;#40;if &amp;#40;= &amp;quot;youtu.be&amp;quot; host&amp;#41;
    &amp;#40;subs path 1&amp;#41;
    &amp;#40;or &amp;#40;get query &amp;quot;v&amp;quot;&amp;#41;
        &amp;#40;get query &amp;quot;amp;v&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn -main &amp;#91;&amp;amp; args&amp;#93;
  &amp;#40;loop &amp;#91;reddit-url reddit-url
         pages      5&amp;#93;
    &amp;#40;let &amp;#91;post-data    &amp;#40;-&amp;gt; reddit-url
                           &amp;#40;http/get {:headers {&amp;quot;User-Agent&amp;quot; &amp;quot;thing by /u/me&amp;quot;
                                                &amp;quot;Accept&amp;quot;     &amp;quot;application/json&amp;quot;}}&amp;#41;
                           :body
                           &amp;#40;json/parse-string true&amp;#41;
                           &amp;#40;get-in &amp;#91;:data :children&amp;#93;&amp;#41;&amp;#41;
          last-post-id &amp;#40;get-in &amp;#40;last post-data&amp;#41; &amp;#91;:data :name&amp;#93;&amp;#41;
          haiku-ids    &amp;#40;map #&amp;#40;-&amp;gt; % &amp;#40;get-in &amp;#91;:data :url&amp;#93;&amp;#41; url get-path&amp;#41; post-data&amp;#41;&amp;#93;
      &amp;#40;doseq &amp;#91;id haiku-ids&amp;#93;
        &amp;#40;try &amp;#40;http/post &amp;quot;https://www.googleapis.com/youtube/v3/playlistItems&amp;quot;
                        {:query-params {:access&amp;#95;token &amp;quot;ACCESS&amp;#95;TOKEN&amp;quot;
                                        :part         &amp;quot;snippet&amp;quot;}
                         :content-type :json
                         :body         &amp;#40;-&amp;gt; {:snippet {:playlistId &amp;quot;PLAYLIST&amp;#95;ID&amp;quot;
                                                      :resourceId {:kind    &amp;quot;youtube#video&amp;quot;
                                                                   :videoId id}}}
                                           json/generate-string&amp;#41;}&amp;#41;
             &amp;#40;catch Exception &amp;#95;&amp;#41;&amp;#41;&amp;#41;
      &amp;#40;when-not &amp;#40;= 1 pages&amp;#41;
        &amp;#40;recur &amp;#40;str reddit-url &amp;quot;&amp;amp;after=&amp;quot; last-post-id&amp;#41;
               &amp;#40;dec pages&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can run this from the root directory of the project on the command line by doing &lt;code&gt;lein run&lt;/code&gt; or from your repl.&lt;/p&gt;&lt;p&gt;I wrapped the &lt;code&gt;post&lt;/code&gt; in a &lt;code&gt;try/catch&lt;/code&gt; block that eats the exception because I was getting some bad responses when attempting to add some of the videos to my playlist - I think it was because some of the videos no longer exist. The link to my playlist is &lt;a href='https://www.youtube.com/watch?v=7DRL6ocEK-M&amp;list=PLJLxMUV2EaMRtYRm5xMsnxquhFzQguB3T'&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Sat, 11 Jun 2016 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2015-06-23-reagent-live-markdown-editor/
</guid>
<link>
http://carmenla.me/blog/2015-06-23-reagent-live-markdown-editor/
</link>
<title>
Reagent Live Markdown Editor
</title>
<description>
&lt;p&gt;In this post, we'll create a simple live Markdown editor with &lt;a href='https://github.com/reagent-project/reagent'&gt;Reagent&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The Reagent Cookbook recipe can be found &lt;a href='https://github.com/reagent-project/reagent-cookbook/tree/master/recipes/markdown-editor'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;setting&amp;#95;up&amp;#95;the&amp;#95;project&quot;&gt;Setting up the Project&lt;/h2&gt;&lt;p&gt;Let's start by creating a new reagent-figwheel project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new reagent-figwheel markdown-editor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, open up the &lt;code&gt;index.html&lt;/code&gt; file and add the following scripts below the app div&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/bootswatch/3.1.1-1/css/united/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/languages/clojure.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We'll be using Bootstrap for basic styling and Highlight.js for code syntax highlighting.&lt;/p&gt;&lt;h2 id=&quot;creating&amp;#95;the&amp;#95;editor&quot;&gt;Creating the Editor&lt;/h2&gt;&lt;p&gt;Next, open up the &lt;code&gt;core.cljs&lt;/code&gt; file in the &lt;code&gt;src/cljs&lt;/code&gt; folder and remove the &lt;code&gt;defonce&lt;/code&gt; statement; we won't be needing that.&lt;/p&gt;&lt;p&gt;The first thing we'll do is set up the editor and create an atom for the Markdown content.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn editor &amp;#91;content&amp;#93;
  &amp;#91;:textarea.form-control
   {:value @content
    :on-change #&amp;#40;reset! content &amp;#40;-&amp;gt; % .-target .-value&amp;#41;&amp;#41;}&amp;#93;&amp;#41;

&amp;#40;defn page &amp;#91;&amp;#93;
  &amp;#40;let &amp;#91;content &amp;#40;reagent/atom nil&amp;#41;&amp;#93;
    &amp;#40;fn &amp;#91;&amp;#93;
      &amp;#91;:div
       &amp;#91;:h1 &amp;quot;Live Markdown Editor&amp;quot;&amp;#93;
       &amp;#91;:div.container-fluid
        &amp;#91;:div.row
         &amp;#91;:div.col-sm-6
          &amp;#91;:h3 &amp;quot;Editor&amp;quot;&amp;#93;
          &amp;#91;editor content&amp;#93;&amp;#93;&amp;#93;&amp;#93;&amp;#93;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code should be familiar to anyone that's used Reagent before.&lt;/p&gt;&lt;p&gt;Next, we'll add the preview section to the right of the editor. Just add the following under the first &lt;code&gt;col-sm-6&lt;/code&gt; div and that's all we need for the UI.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;:div.col-sm-6
 &amp;#91;:h3 &amp;quot;Preview&amp;quot;&amp;#93;
 &amp;#91;preview content&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The preview component needs to display the parsed and compiled Markdown so let's do that next. We'll be using &lt;a href='https://github.com/chjj/marked'&gt;Marked&lt;/a&gt; to handle the Markdown.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn markdown-component &amp;#91;content&amp;#93;
  &amp;#40;fn &amp;#91;&amp;#93;
    &amp;#91;:div {:dangerouslySetInnerHTML
           {:&amp;#95;&amp;#95;html &amp;#40;-&amp;gt; content str js/marked&amp;#41;}}&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defn preview &amp;#91;content&amp;#93;
  &amp;#40;when &amp;#40;not-empty @content&amp;#41;
    &amp;#40;markdown-component @content&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will display the compiled Markdown but it's still missing syntax highlighting for code blocks. The following code will traverse the code nodes in the preview and apply the necessary syntax highlighting.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn highlight-code &amp;#91;html-node&amp;#93;
  &amp;#40;let &amp;#91;nodes &amp;#40;.querySelectorAll html-node &amp;quot;pre code&amp;quot;&amp;#41;&amp;#93;
    &amp;#40;loop &amp;#91;i &amp;#40;.-length nodes&amp;#41;&amp;#93;
      &amp;#40;when-not &amp;#40;neg? i&amp;#41;
        &amp;#40;when-let &amp;#91;item &amp;#40;.item nodes i&amp;#41;&amp;#93;
          &amp;#40;.highlightBlock js/hljs item&amp;#41;&amp;#41;
        &amp;#40;recur &amp;#40;dec i&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, we can't just call this function inside &lt;code&gt;markdown-component&lt;/code&gt; immediately after the Markdown is compiled. The code syntax cannot be highlighted until the preview component has been mounted on the DOM.&lt;/p&gt;&lt;p&gt;So in order to do this, we need to post-process the HTML after the preview component has been mounted. We can do this by adding metadata to the &lt;code&gt;fn&lt;/code&gt; in &lt;code&gt;markdown-component&lt;/code&gt; using &lt;code&gt;with-meta&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn markdown-component &amp;#91;content&amp;#93;
  &amp;#91;&amp;#40;with-meta
     &amp;#40;fn &amp;#91;&amp;#93;
       &amp;#91;:div {:dangerouslySetInnerHTML
              {:&amp;#95;&amp;#95;html &amp;#40;-&amp;gt; content str js/marked&amp;#41;}}&amp;#93;&amp;#41;
     {:component-did-mount
      &amp;#40;fn &amp;#91;this&amp;#93;
        &amp;#40;let &amp;#91;node &amp;#40;reagent/dom-node this&amp;#41;&amp;#93;
          &amp;#40;highlight-code node&amp;#41;&amp;#41;&amp;#41;}&amp;#41;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this metadata, &lt;code&gt;component-did-mount&lt;/code&gt; will be called after the HTML has been generated and the node is mounted in the browser DOM.&lt;/p&gt;&lt;p&gt;Lastly, if we want to build the ClojureScript with advanced compilation we'll have to specify some externs. This is because the compiler munges variable names that come from external libraries, making them unavailable inside the ClojureScript.&lt;/p&gt;&lt;p&gt;To overcome this, create a file with the following&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var hljs = {};
hljs.highlightBlock = function&amp;#40;&amp;#41;{};
marked = function&amp;#40;&amp;#41;{};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and specify it inside your &lt;code&gt;:compiler&lt;/code&gt; map in your &lt;code&gt;project.clj&lt;/code&gt;. For example,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:externs &amp;#91;&amp;quot;externs/syntax.js&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For the full source code visit my &lt;a href='https://github.com/lacarmen/reagent-markdown-editor'&gt;GitHub&lt;/a&gt; or see the live, styled up demo &lt;a href='https://rawgit.com/lacarmen/reagent-markdown-editor/master/demo/editor.html'&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Tue, 23 Jun 2015 00:00:00 -0400
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2014-12-31-fizzbuzz/
</guid>
<link>
http://carmenla.me/blog/2014-12-31-fizzbuzz/
</link>
<title>
Unconditional FizzBuzz
</title>
<description>
&lt;p&gt;Ah FizzBuzz, the age old programming interview question. For those of you that don't know what FizzBuzz is, here's a quick rundown:&lt;/p&gt;&lt;p&gt;For numbers 1 through 100&lt;/p&gt;&lt;ul&gt;&lt;li&gt;if the number is divisible by 3, print &quot;Fizz&quot;&lt;ul&gt;&lt;li&gt;if the number is divisible by 5, print &quot;Buzz&quot;&lt;/li&gt;&lt;li&gt;if the number is divisible by 3 and 5, print &quot;FizzBuzz&quot;&lt;/li&gt;&lt;li&gt;otherwise, print the number  &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Seems easy right? You'd be surprised at how many people can't do this. I'd probably be surprised too if I hadn't sat on the interviewing side of the table at my previous placement when they were looking for their next co-op student. &lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash;more&amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;A basic solution in Clojure could be as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;map #&amp;#40;cond &amp;#40;zero? &amp;#40;mod % 15&amp;#41;&amp;#41; &amp;quot;FizzBuzz&amp;quot;
            &amp;#40;zero? &amp;#40;mod % 5&amp;#41;&amp;#41; &amp;quot;Buzz&amp;quot;
            &amp;#40;zero? &amp;#40;mod % 3&amp;#41;&amp;#41; &amp;quot;Fizz&amp;quot;
            :else %&amp;#41;
     &amp;#40;range 1 101&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now in my previous post I talked about Project Euler and how you can solve the problems in numerous different ways. The same goes for FizzBuzz.   &lt;/p&gt;&lt;p&gt;Some popular modifications to the FizzBuzz challenges include: writing the solution recursively, writing it in just one (reasonably long) line of code, using different paradigms, etc. A friend of mine actually mentioned this particular one to me and I thought it was slightly more interesting than the alternatives I've been presented with so far - the unconditional FizzBuzz.&lt;/p&gt;&lt;p&gt;In other words, write FizzBuzz without using any conditionals such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;cond&lt;/code&gt;. Of course I wrote my solution in Clojure. It's so handy for manipulating data :)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;let &amp;#91;words &amp;#91;nil &amp;quot;Fizz&amp;quot; &amp;quot;Buzz&amp;quot; &amp;quot;FizzBuzz&amp;quot;&amp;#93;
      fizz &amp;#91;1 0 0&amp;#93;
      buzz &amp;#91;2 0 0 0 0&amp;#93;&amp;#93;
     &amp;#40;map #&amp;#40;&amp;#40;assoc words 0 %&amp;#41; &amp;#40;+ &amp;#40;fizz &amp;#40;rem % 3&amp;#41;&amp;#41; &amp;#40;buzz &amp;#40;rem % 5&amp;#41;&amp;#41;&amp;#41;&amp;#41;
          &amp;#40;range 1 101&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could write this in one line if you wanted to by getting rid of that let statement but of course, that removes some of the readability.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;map #&amp;#40;&amp;#40;assoc &amp;#91;nil &amp;quot;Fizz&amp;quot; &amp;quot;Buzz&amp;quot; &amp;quot;FizzBuzz&amp;quot;&amp;#93; 0 %&amp;#41; &amp;#40;+ &amp;#40;&amp;#91;1 0 0 &amp;#93; &amp;#40;rem % 3&amp;#41;&amp;#41; &amp;#40;&amp;#91;2 0 0 0 0&amp;#93; &amp;#40;rem % 5&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;#40;range 1 101&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The one liner version of this solution is Twitter friendly as well - 113 characters :)&lt;/p&gt;&lt;p&gt;&lt;em&gt;ps. for extra laughs see &lt;a href='https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition'&gt;FizzBuzz - The Enterprise Edition&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>
Wed, 31 Dec 2014 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2014-12-24-post4/
</guid>
<link>
http://carmenla.me/blog/2014-12-24-post4/
</link>
<title>
Clojure and Project Euler
</title>
<description>
 &lt;p&gt;A few years ago I really enjoyed doing programming contests - practice ones and real ones. It was a really good way for me to get comfortable with both the concepts and the language when I started programming. Nowadays the contests that I frequented are usually too easy to be a challenge but they also present the same type of challenges year after year.&lt;/p&gt;&lt;p&gt;This was when I was in high school so I was using Visual Basic at the time. When I entered university and learned Java and Python I decided to take on Project Euler to become familiar with the languages. Although it's been 4 months since I started working with Clojure and I'm not exactly a beginner anymore, I thought it would still be fun to Project Euler since Clojure is my first FP language.&lt;/p&gt;&lt;h2 id=&quot;problem&amp;#95;1&amp;#95;-&amp;#95;&lt;a href='https://projecteuler.net/problem=1'&gt;Multiples of 3 and 5&lt;/a&gt;&quot;&gt;Problem 1 - &lt;a href='https://projecteuler.net/problem=1'&gt;Multiples of 3 and 5&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.  &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;On a side note, when I first saw the title of this problem I thought it was going to be FizzBuzz :)&lt;/p&gt;&lt;p&gt;A straightforward solution:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reduce + &amp;#40;filter #&amp;#40;or &amp;#40;zero? &amp;#40;mod % 3&amp;#41;&amp;#41;
                       &amp;#40;zero? &amp;#40;mod % 5&amp;#41;&amp;#41;&amp;#41;
                  &amp;#40;range 1000&amp;#41;&amp;#41;&amp;#41;
=&amp;gt; 233168
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This generates a vector of numbers up to 1000 and then &lt;code&gt;filter&lt;/code&gt; returns a lazy sequence of the elements that satisfy the predicate function. Finally, &lt;code&gt;reduce&lt;/code&gt; is used to sum up the remaining numbers.&lt;/p&gt;&lt;p&gt;The beauty of Project Euler problems is that they can be solved with simple language basics but you can usually rewrite them in more elegant ways.   &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reduce + &amp;#40;set &amp;#40;concat &amp;#40;range 0 1000 3&amp;#41; &amp;#40;range 0 1000 5&amp;#41;&amp;#41;&amp;#41;&amp;#41;
=&amp;gt; 233168
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By using the third parameter for Clojure's &lt;code&gt;range&lt;/code&gt;, you can generate sequences of multiples of 3 and 5. By concatenating these sequences and then turning them into a set, you get rid of the duplicate values.  &lt;/p&gt;&lt;h2 id=&quot;problem&amp;#95;2&amp;#95;-&amp;#95;&lt;a href='https://projecteuler.net/problem=2'&gt;Even Fibonacci numbers&lt;/a&gt;&quot;&gt;Problem 2 - &lt;a href='https://projecteuler.net/problem=2'&gt;Even Fibonacci numbers&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;First, define the Fibonacci Sequence:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn fib
  &amp;#40;&amp;#91;&amp;#93; &amp;#40;fib 1 2&amp;#41;&amp;#41;
  &amp;#40;&amp;#91;x y&amp;#93; &amp;#40;cons x &amp;#40;lazy-seq &amp;#40;fib y &amp;#40;+ x y&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using &lt;code&gt;lazy-seq&lt;/code&gt; allows us to generate an infinite sequence.&lt;/p&gt;&lt;p&gt;Now just add up the even elements under 4m.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reduce + &amp;#40;take-while &amp;#40;partial &amp;gt;= 4000000&amp;#41; 
                    &amp;#40;filter even? &amp;#40;fib&amp;#41;&amp;#41;&amp;#41;&amp;#41;
=&amp;gt; 4613732
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, we use &lt;code&gt;filter&lt;/code&gt; to get a sequence of the even Fibonacci numbers. Then we use &lt;code&gt;take-while&lt;/code&gt; to return a sequence of elements for which the supplied predicate is true. Here, our predicate is &lt;code&gt;&amp;#40;partial &amp;gt;= 4000000&amp;#41;&lt;/code&gt;. Partial takes a function f and fewer than normal arguments to f and returns a function that takes the additional args.&lt;/p&gt;&lt;h2 id=&quot;problem&amp;#95;3&amp;#95;-&amp;#95;&lt;a href='https://projecteuler.net/problem=3'&gt;Largest prime factor&lt;/a&gt;&quot;&gt;Problem 3 - &lt;a href='https://projecteuler.net/problem=3'&gt;Largest prime factor&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; What is the largest prime factor of the number 600851475143? &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Okay there's a few factorization algorithms out there that can requre a sequence of all the prime factors of a number. If you choose to implement one of these algorithms then you could simply take the max for the answer.&lt;/p&gt;&lt;p&gt;Here's how I did it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn largest-prime &amp;#91;num factor&amp;#93;
  &amp;#40;if &amp;#40;or &amp;#40;&amp;gt; factor &amp;#40;int &amp;#40;Math/sqrt num&amp;#41;&amp;#41;&amp;#41;     ; Don't need to check further than this
          &amp;#40;= num factor&amp;#41;&amp;#41;
    num
    &amp;#40;if &amp;#40;zero? &amp;#40;mod num factor&amp;#41;&amp;#41;
      &amp;#40;recur &amp;#40;/ num factor&amp;#41; factor&amp;#41;            ; If the number is divisible by the factor, divide and iterate
      &amp;#40;recur num &amp;#40;inc factor&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;              ; Otherwise try with a bigger factor
      
&amp;#40;largest-prime 600851475143 2&amp;#41;
=&amp;gt; 6857
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Edit:&lt;/strong&gt; A redditor has kindly informed me that &lt;code&gt;&amp;#40;&amp;gt; &amp;#40;&amp;#42; factor factor&amp;#41; num&amp;#41;&lt;/code&gt; is faster than &lt;code&gt;&amp;#40;&amp;gt; factor &amp;#40;int &amp;#40;Math/sqrt num&amp;#41;&amp;#41;&amp;#41;&lt;/code&gt; since taking a square root is slower than squaring. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I start off with &lt;code&gt;factor = 2&lt;/code&gt; since 2 is the smallest prime. If &lt;code&gt;factor&lt;/code&gt; is greater than the square root of &lt;code&gt;num&lt;/code&gt; or if they're equal then the search stops there. (The floor of the square root of a number is the upper bound for its largest prime factor.)&lt;/p&gt;&lt;p&gt;Next, if &lt;code&gt;num&lt;/code&gt; is divisible by &lt;code&gt;factor&lt;/code&gt; then call &lt;code&gt;largest-prime&lt;/code&gt; again with &lt;code&gt;&amp;#40;/ num factor&amp;#41;&lt;/code&gt; and &lt;code&gt;factor&lt;/code&gt;. Otherwise, increment &lt;code&gt;factor&lt;/code&gt; and keep trying.&lt;/p&gt;&lt;h2 id=&quot;problem&amp;#95;4&amp;#95;-&amp;#95;&lt;a href='https://projecteuler.net/problem=4'&gt;Largest palindrome product&lt;/a&gt;&quot;&gt;Problem 4 - &lt;a href='https://projecteuler.net/problem=4'&gt;Largest palindrome product&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;First, a little helper function to determine if a number is a palindrome:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn palindrome? &amp;#91;n&amp;#93;
  &amp;#40;= &amp;#40;reverse &amp;#40;str n&amp;#41;&amp;#41; &amp;#40;seq &amp;#40;str n&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then filter out the palindrome products and find the max:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;apply max
     &amp;#40;filter palindrome?
             &amp;#40;for
               &amp;#91;a &amp;#40;range 100 1000&amp;#41;
                b &amp;#40;range 100 1000&amp;#41;&amp;#93;
               &amp;#40;&amp;#42; a b&amp;#41;&amp;#41;&amp;#41;&amp;#41;
=&amp;gt; 906609
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; structure shown here will iterate through b for each iteration of a. In other words, it's a nested for-loop.&lt;/p&gt;&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; is an interesting function. Calling &lt;code&gt;&amp;#40;apply max &amp;#91;1 2 3&amp;#93;&amp;#41;&lt;/code&gt; is equivalent to &lt;code&gt;&amp;#40;max 1 2 3&amp;#41;&lt;/code&gt;.  &lt;/p&gt;&lt;h2 id=&quot;problem&amp;#95;5&amp;#95;-&amp;#95;&lt;a href='https://projecteuler.net/problem=5'&gt;Smallest multiple&lt;/a&gt;&quot;&gt;Problem 5 - &lt;a href='https://projecteuler.net/problem=5'&gt;Smallest multiple&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20? &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This problem is pretty straightforward and can be solved with high school math.&lt;/p&gt;&lt;p&gt;The greatest common divisor of two non-zero integers is the largest positive integer that divides the numbers without a remainder.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn gcd &amp;#91;a b&amp;#93; 
  &amp;#40;if &amp;#40;zero? a&amp;#41; 
    b
    &amp;#40;recur &amp;#40;mod b a&amp;#41; a&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The lowest common multiple of two numbers is the smallest number (not zero) that is a multiple of both.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn lcm &amp;#91;a b&amp;#93; 
  &amp;#40;/ &amp;#40;&amp;#42; a b&amp;#41; &amp;#40;gcd a b&amp;#41;&amp;#41;&amp;#41; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, use &lt;code&gt;reduce&lt;/code&gt; to find the lowest common multiple of all the numbers from 1 to 20 inclusively.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;reduce lcm &amp;#40;range 1 21&amp;#41;&amp;#41;
=&amp;gt; 232792560
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will find the LCM of 1 and 2, then the LCM of the result of that and 3 and so on. Thus, the LCM of all the numbers from 1 to 20.&lt;/p&gt;&lt;p&gt;I'll leave off here before this post gets too lengthy. Project Euler (and a lot of other stuff) is a lot more enjoyable when working with Clojure so I'll likely do a part two eventually.&lt;/p&gt;
</description>
<pubDate>
Wed, 24 Dec 2014 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2014-12-08-post3/
</guid>
<link>
http://carmenla.me/blog/2014-12-08-post3/
</link>
<title>
Splitting Out Cryogen's Compiler
</title>
<description>
 &lt;p&gt; As Cryogen continued to grow over the past few weeks, a couple of users - including myself - found it increasingly cumbersome to update our blogs with the newest features in the template. It seemed the general approach was to do another &lt;code&gt;lein new cryogen&lt;/code&gt; and then copy over the updates. Obviously this is very error prone and merging is a pain for those who have their own modifications to the template.   &lt;/p&gt;&lt;p&gt; Seeing as how Cryogen is pretty stable now, pulling out the compiler code into a library was the clear direction to go in and was also agreed upon by the current users.   &lt;/p&gt;&lt;p&gt; With that, I'm happy to report that I've migrated everything except for &lt;code&gt;server.clj&lt;/code&gt; from Cryogen's &lt;code&gt;src&lt;/code&gt; folder to &lt;a href='https://github.com/lacarmen/cryogen-core'&gt;Cryogen-core&lt;/a&gt;. This library is also on &lt;a href='https://clojars.org/cryogen-core'&gt;clojars&lt;/a&gt; so you can simply add the dependency to your project. You can still create a new Cryogen template with &lt;code&gt;lein new cryogen my-blog&lt;/code&gt;, but this will be the new file structure:   &lt;/p&gt;&lt;pre&gt;&lt;code&gt; my-blog
 |---.gitignore
 |---project.clj
 |---resources
 |   |---templates
 |   |   |---css
 |   |   |   |---screen.css
 |   |   |---js
 |   |   |   |---highlight.pack.js
 |   |   |---html
 |   |   |   |---layouts
 |   |   |       |---archives.html
 |   |   |       |---base.html
 |   |   |       |---home.html
 |   |   |       |---page.html
 |   |   |       |---post.html
 |   |   |       |---tag.html
 |   |   |---md
 |   |       |---pages
 |   |       |   |---about.md
 |   |       |   |---another-page.md
 |   |       |---posts
 |   |           |---10-03-2014-first-post.md
 |   |           |---11-04-2014-second-post.md
 |   |           |---13-11-2014-docs.md
 |   |---404.html
 |   |---config.edn
 |---src
 |   |---cryogen
 |   |   |---server.clj
 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; If you have your own modifications to the compiler, you can do a redef in your project to override the default behaviour. When there are updates to the compiler you can simply bump up the version in your project while keeping your modifications.  &lt;/p&gt;&lt;p&gt; On one more note, there was an issue where local resource links would have to be absolute such as:   &lt;/p&gt;&lt;pre&gt;&lt;code&gt; !&amp;#91;pic01&amp;#93;&amp;#40;/blog/img/pic01.png&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;p&gt; Where &lt;code&gt;/blog&lt;/code&gt; is your blog-prefix specified in your config. If you changed your blog prefix though you would have to manually search and replace all of the &lt;code&gt;/blog&lt;/code&gt;'s in your markdown files so I've added a simple transformer function, &lt;code&gt;rewrite-hrefs&lt;/code&gt;,  in the compiler amend this.  &lt;/p&gt;&lt;pre&gt;&lt;code&gt; &amp;#40;defn rewrite-hrefs
   &amp;#91;{:keys &amp;#91;blog-prefix&amp;#93;} text state&amp;#93;
   &amp;#91;&amp;#40;clojure.string/replace text #&amp;quot;href=.?/|src=.?/&amp;quot; #&amp;#40;str &amp;#40;subs % 0 &amp;#40;dec &amp;#40;count %&amp;#41;&amp;#41;&amp;#41; blog-prefix &amp;quot;/&amp;quot;&amp;#41;&amp;#41;
    state&amp;#93;&amp;#41;
 
 &amp;#40;defn parse-content
   &amp;#91;rdr config&amp;#93;
   &amp;#40;md-to-html-string
     &amp;#40;-&amp;gt;&amp;gt; &amp;#40;java.io.BufferedReader. rdr&amp;#41;
          &amp;#40;line-seq&amp;#41;
          &amp;#40;s/join &amp;quot;\n&amp;quot;&amp;#41;&amp;#41;
     :heading-anchors true
     :replacement-transformers &amp;#40;conj transformer-vector &amp;#40;partial rewrite-hrefs config&amp;#41;&amp;#41;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; When &lt;code&gt;parse-content&lt;/code&gt; is called, the replacement transformer will process the html generated by &lt;code&gt;md-to-html-string&lt;/code&gt; and inject the blog prefix in front of any local resource links in your markdown. For example, if your blog prefix was &lt;code&gt;/blog&lt;/code&gt;,   &lt;/p&gt;&lt;pre&gt;&lt;code&gt; !&amp;#91;pic01&amp;#93;&amp;#40;/img/pic01.png&amp;#41;
 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; would become  &lt;/p&gt;&lt;pre&gt;&lt;code&gt; &amp;lt;img src=&amp;quot;/blog/img/cryogen.png&amp;quot;&amp;gt;
 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; once the post gets compiled. Do note that the leading slash in front of the local resource is required.   &lt;/p&gt;&lt;p&gt; These are the things that have been happening with Cryogen lately. And as usual, if you want new features added please feel free to submit an issue or pull request. :)  &lt;/p&gt; 
</description>
<pubDate>
Mon, 08 Dec 2014 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2014-11-26-post2/
</guid>
<link>
http://carmenla.me/blog/2014-11-26-post2/
</link>
<title>
Updates and Architecture
</title>
<description>
&lt;p&gt;It's been about two weeks since I released Cryogen to the public and the feedback has been great so I'd like to go over some of the changes that have been made thus far and a how everything fits together behind Cryogen.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash;more&amp;ndash;&gt;&lt;/p&gt;&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;&lt;p&gt;Someone pointed out to me that posts or pages that were deleted from &lt;code&gt;resources/templates&lt;/code&gt; would have to be manually deleted from &lt;code&gt;resources/public&lt;/code&gt; in order for the sitemap and RSS feed to be updated correctly since these two files are generated based on the contents of the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;&lt;p&gt;To remedy this, I updated the compiler to wipe out the &lt;code&gt;public&lt;/code&gt; folder and then generate all of its contents again with each compile. I was actually worried that this would increase compile time but &lt;a href='http://yogthos.net/'&gt;Yogthos's blog&lt;/a&gt; has actually moved to Cryogen and found no problems with performance even with his 60+ existing posts.&lt;/p&gt;&lt;p&gt;Previously, any asset folders like css and javascript were stored under &lt;code&gt;public&lt;/code&gt; but then have now been moved to &lt;code&gt;templates&lt;/code&gt;. &lt;em&gt;Everything&lt;/em&gt; in the public folder is now generated by the compiler. I've added the &lt;code&gt;:resources&lt;/code&gt; key to the config that lets you specify which asset folders you would like to copy over from &lt;code&gt;templates&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:resources &amp;#91;&amp;quot;css&amp;quot; &amp;quot;js&amp;quot; &amp;quot;img&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The copying is done by this simple function in &lt;code&gt;src/cryogen/io.clj&lt;/code&gt; using &lt;a href='https://github.com/Raynes/fs'&gt;fs&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn copy-resources &amp;#91;{:keys &amp;#91;blog-prefix resources&amp;#93;}&amp;#93;
  &amp;#40;doseq &amp;#91;resource resources&amp;#93;
    &amp;#40;fs/copy-dir
      &amp;#40;str &amp;quot;resources/templates/&amp;quot; resource&amp;#41;
      &amp;#40;str public blog-prefix &amp;quot;/&amp;quot; resource&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cryogen also has &lt;a href='https://disqus.com/'&gt;Disqus&lt;/a&gt; support now. Simply register your blog on Disqus, add your &lt;code&gt;disqus-shortname&lt;/code&gt; to the config and set &lt;code&gt;disqus?&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and Selmer will inject the info into the following script in the post template.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{% if disqus-shortname %}
&amp;lt;div id=&amp;quot;disqus&amp;#95;thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    &amp;#40;function&amp;#40;&amp;#41; {
        var dsq = document.createElement&amp;#40;'script'&amp;#41;; dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//{{disqus-shortname}}.disqus.com/embed.js';
        &amp;#40;document.getElementsByTagName&amp;#40;'head'&amp;#41;&amp;#91;0&amp;#93; || document.getElementsByTagName&amp;#40;'body'&amp;#41;&amp;#91;0&amp;#93;&amp;#41;.appendChild&amp;#40;dsq&amp;#41;;
    }&amp;#41;&amp;#40;&amp;#41;;
&amp;lt;/script&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For long posts or pages with numerous headings, you can now generate a table of contents. Just add &lt;code&gt;:toc true&lt;/code&gt; to the metadata of the post or page where you want to generate a toc. For example:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:title &amp;quot;Updates and Architecture&amp;quot;
 :layout :post
 :tags &amp;#91;:cryogen :clojure&amp;#93;
 :toc true}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some other updates:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Can now customize the number of recent posts shown&lt;ul&gt;&lt;li&gt;Sass support by &lt;a href='https://github.com/turbopape'&gt;turbopape&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Archive sorting fixed for users with a locale that isn't &quot;en&quot;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;&lt;p&gt;Sometimes things are obvious to you when you design them but not necessarily to others. I've received a few questions regarding templating on the Cryogen repo so I thought I'd go over the basic architecture here.&lt;/p&gt;&lt;p&gt;The reason I created Cryogen was because I wanted a site generator (in Clojure!) that had a clear separation between content and layout. The idea is that you create HTML templates under &lt;code&gt;resources/templates/html/layouts&lt;/code&gt; with whatever layout/theme you want and the content of your posts and pages from &lt;code&gt;resources/templates/md&lt;/code&gt; gets injected by the compiler through Selmer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt; Post/Page Layouts &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Each markdown file representing a post or page must contain metadata about the layout in the &lt;code&gt;:layout&lt;/code&gt; key that corresponds to an HTML file under &lt;code&gt;html/layouts&lt;/code&gt;. For example, this post's metadata is as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:title &amp;quot;Updates and Architecture&amp;quot;
 :layout :post
 :tags &amp;#91;:cryogen :clojure&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the site gets built, this is what puts the post together:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;spit &amp;#40;str public &amp;#40;:uri post&amp;#41;&amp;#41;
            &amp;#40;render-file &amp;#40;str &amp;quot;templates/html/layouts/&amp;quot; &amp;#40;:layout post&amp;#41;&amp;#41;
                         &amp;#40;merge default-params
                                {:servlet-context  &amp;quot;../&amp;quot;
                                 :post             post
                                 :disqus-shortname disqus-shortname}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Selmer will render the post and the compiler will spit it out into the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;&lt;p&gt;The second argument passed into &lt;code&gt;render-file&lt;/code&gt; is a map of items that Selmer will inject into the specified layout. In this case, that will be &lt;code&gt;post.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;django&quot;&gt;&amp;lt;div id=&amp;quot;post&amp;quot;&amp;gt;
    ...
    &amp;lt;h2&amp;gt;{{post.title}}&amp;lt;/h2&amp;gt;
    ...
    &amp;lt;div&amp;gt;
        {{post.content|safe}}
    &amp;lt;/div&amp;gt;
    ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, &lt;code&gt;post&lt;/code&gt; is another map of items so &lt;code&gt;{{post.title}}&lt;/code&gt; and &lt;code&gt;{{post.content}}&lt;/code&gt; will render the values of &lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:content&lt;/code&gt; from &lt;code&gt;post&lt;/code&gt;. Pages and tags are compiled in a similar fashion.&lt;/p&gt;&lt;p&gt;&lt;strong&gt; Templates &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This segues into how inheritance works in the templates. In the &lt;code&gt;layouts&lt;/code&gt; folder, &lt;code&gt;base.html&lt;/code&gt; contains the header, sidebar and footer of the site. These are the things that remain constant no matter what page or post you are viewing. The page/post content gets injected into the main reading pane with &lt;code&gt;{% block content %}&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;!--header--&amp;gt;
    &amp;lt;!--sidebar--&amp;gt;
    ...
    &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
    {% block content %}
    {% endblock %}
    &amp;lt;/div&amp;gt;
    ...
    &amp;lt;!--footer--&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To inherit the base template, all the other html files in the &lt;code&gt;layouts&lt;/code&gt; folder start with a line of code that specifies the path of the base layout it should inherit followed by the layout for that page or post wrapped in &lt;code&gt;{% block content %}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A short example is the layout for pages.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{% extends &amp;quot;templates/html/layouts/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;custom-page&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;page-header&amp;quot;&amp;gt;
        &amp;lt;h2&amp;gt;{{page.title}}&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    {% if page.toc %}{{page.toc|safe}}{% endif %}
    {{page.content|safe}}
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that's it! If you want to change the header, sidebar or footer - change it in &lt;code&gt;base.html&lt;/code&gt;. If you want to add more post or page layouts, create a new html file under &lt;code&gt;resources/templates/html/layouts&lt;/code&gt; and follow the above structure. If you want to add different filters to your content, please check out the &lt;a href='https://github.com/yogthos/selmer#usage'&gt;Selmer docs&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Wed, 26 Nov 2014 00:00:00 -0500
</pubDate>
</item>
<item>
<guid>
http://carmenla.me/blog/2014-11-12-post1/
</guid>
<link>
http://carmenla.me/blog/2014-11-12-post1/
</link>
<title>
Another Year, Another Blog
</title>
<description>
&lt;p&gt;Welcome to the first post of what is probably my 3rd or 4th attempt at maintaining a blog. The first few times didn't blow over too well. I'm not one for creative writing and my lack of motivation eventually led to the abandonment of my previous blogging attempts.&lt;/p&gt;&lt;p&gt;The last time I tried to maintain a blog was probably two to three years ago and I was working with WordPress. The templates weren't very palateable and neither was the code. The admin interface was nice but it just wasn't worth it if I only wanted to serve up static content. I recall trying out blogspot but that wasn't my cup of tea either.&lt;/p&gt;&lt;h2 id=&quot;enter&amp;#95;misaki&quot;&gt;Enter Misaki&lt;/h2&gt;&lt;p&gt;Originally, I tried to use &lt;a href='https://github.com/liquidz/misaki'&gt;Misaki&lt;/a&gt;, a &lt;a href='http://jekyllrb.com/'&gt;Jekyll&lt;/a&gt; inspired static site generator written in Clojure. It was simple at first. There were a few included &lt;a href='https://github.com/weavejester/hiccup'&gt;hiccup&lt;/a&gt; layouts and a few example posts (also written in hiccup). But I soon found that this was going to be much more complicated than I had anticipated.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash;more&amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;I encountered my first problem when I wanted to display the most recent blog entry on the home page. After searching through the &lt;a href='http://liquidz.github.io/misaki/api/index.html'&gt;API&lt;/a&gt;, I concluded that this was the best and only way to display the contents of the latest post: &lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;:div
   &amp;#40;-&amp;gt;&amp;gt; &amp;#40;:posts site&amp;#41;
        first
        :lazy-content
        force&amp;#41;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Except... this wasn't quite right. Misaki's compiler escaped html tags when it populated the lazy content. I guess this was an easy fix though. I simply modified function from the line of code where the lazy content was populated. &lt;/p&gt;&lt;p&gt;My biggest complaint was that Misaki didn't have out of the box support for Markdown posts. There's actually another version called &lt;a href='https://github.com/liquidz/misaki-markdown'&gt;Misaki Markdown&lt;/a&gt; but any pages that I wanted to add had to be written in markdown as well. What I wanted was to be able to create custom pages with html/css and write my posts in markdown. &lt;/p&gt;&lt;p&gt;I ended up altering &lt;code&gt;misaki.server&lt;/code&gt; in order to preprocess markdown posts into html posts before compiling the entire site. The first three functions below are what I added.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn- find-assets &amp;#91;f ext&amp;#93;
  &amp;#40;-&amp;gt;&amp;gt; f
       file-seq
       &amp;#40;filter &amp;#40;fn &amp;#91;file&amp;#93; &amp;#40;-&amp;gt; file .getName &amp;#40;.endsWith ext&amp;#41;&amp;#41;&amp;#41;&amp;#41;
       rest&amp;#41;&amp;#41;

&amp;#40;defn preprocess &amp;#91;file&amp;#93;
  &amp;#40;with-open &amp;#91;rdr &amp;#40;clojure.java.io/reader file&amp;#41;&amp;#93;
    &amp;#40;-&amp;gt;&amp;gt; &amp;#40;doall &amp;#40;line-seq rdr&amp;#41;&amp;#41;
         &amp;#40;split-with #&amp;#40;.startsWith &amp;#40;.trim %&amp;#41; &amp;quot;;&amp;quot;&amp;#41;&amp;#41;
         &amp;#40;map #&amp;#40;clojure.string/join &amp;quot;\n&amp;quot; %&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;defn compile-markdown &amp;#91;&amp;#93;
  &amp;#40;doseq &amp;#91;file &amp;#40;find-assets &amp;#40;clojure.java.io/file &amp;quot;md&amp;quot;&amp;#41; &amp;quot;md&amp;quot;&amp;#41;&amp;#93;
    &amp;#40;spit &amp;#40;str &amp;quot;my-blog/template/posts/&amp;quot;
               &amp;#40;first &amp;#40;clojure.string/split &amp;#40;.getName file&amp;#41; #&amp;quot;\.&amp;quot;&amp;#41;&amp;#41;
               &amp;quot;.html.clj&amp;quot;&amp;#41;
          &amp;#40;let &amp;#91;&amp;#91;header content&amp;#93; &amp;#40;preprocess file&amp;#41;&amp;#93;
            &amp;#40;str header &amp;quot;\n&amp;quot;  &amp;quot;&amp;#91;:div &amp;quot; &amp;#40;with-out-str &amp;#40;pprint &amp;#40;md/to-html content&amp;#41;&amp;#41;&amp;#41; &amp;quot;&amp;#93;&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;

; =do-all-compile
&amp;#40;defn do-all-compile
  &amp;#91;&amp;#93;
  &amp;#40;compile-markdown&amp;#41;
  &amp;#40;print-compile-result &amp;quot;all templates&amp;quot; &amp;#40;call-all-compile&amp;#41;&amp;#41;
  &amp;#40;println &amp;quot; &amp;#42; Finish Compiling&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setting up my site to my specifications took way longer than it should have and I couldn't help but think there must be another way.&lt;/p&gt;&lt;h2 id=&quot;introducing&amp;#95;cryogen&quot;&gt;Introducing Cryogen&lt;/h2&gt;&lt;p&gt;All this resulted in &lt;a href='https://github.com/lacarmen/cryogen'&gt;Cryogen&lt;/a&gt;, a simple static site generator written in Clojure by &lt;a href='https://github.com/yogthos'&gt;Yogthos&lt;/a&gt; and I.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blog posts and pages with Markdown&lt;ul&gt;&lt;li&gt;Twitter Bootstrap theming&lt;/li&gt;&lt;li&gt;Plain HTML page templates with &lt;a href='https://github.com/yogthos/selmer'&gt;Selmer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Code syntax highlighting with &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Tags&lt;/li&gt;&lt;li&gt;Sitemap&lt;/li&gt;&lt;li&gt;RSS feed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Setting Up Cryogen&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The easiest way to get Cryogen set up is to use &lt;a href='https://github.com/technomancy/leiningen/'&gt;Leiningen&lt;/a&gt;. Once you have Leiningen 2.5.0 or above installed, simply run the following command to create a new cryogen template.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein new cryogen &amp;lt;project name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively, you can put &lt;code&gt;cryogen&lt;/code&gt; in the &lt;code&gt;Leningen Template to use:&lt;/code&gt; field if you are creating a new Leiningen project in Eclipse with Counterclockwise.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Project Structure&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The new project will have the following structure:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;my-blog
|---.gitignore
|---project.clj
|---resources
|   |---config.edn
|   |---templates
|   |   |---css
|   |   |   |---screen.css
|   |   |---js
|   |   |   |---main.js
|   |   |---img
|   |   |   |---favicon.png
|   |   |---html
|   |   |   |---layouts
|   |   |       |---archives.html
|   |   |       |---base.html
|   |   |       |---home.html
|   |   |       |---page.html
|   |   |       |---post.html
|   |   |       |---tag.html
|   |   |---md
|   |       |---pages
|   |       |   |---about.md
|   |       |   |---another-page.md
|   |       |---posts
|   |           |---10-03-2014-first-post.md
|   |           |---11-04-2014-second-post.md
|   |           |---13-11-2014-docs.md
|---src
|   |---cryogen
|   |   |---compiler.clj
|   |   |---io.clj
|   |   |---rss.clj
|   |   |---server.clj
|   |   |---sitemap.clj
|   |   |---watcher.clj

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The skeleton site has a few example posts and pages in it. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;templates/md&lt;/code&gt; - blog posts written in Markdown&lt;ul&gt;&lt;li&gt;&lt;code&gt;templates/pages&lt;/code&gt;- custom pages written in Markdown&lt;/li&gt;&lt;li&gt;&lt;code&gt;templates/css&lt;/code&gt; - save your custom CSS files&lt;/li&gt;&lt;li&gt;&lt;code&gt;templates/js&lt;/code&gt; - save your custom js files here&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt; Compiling Posts and Running the Server &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The server can be started using the &lt;code&gt;lein-ring&lt;/code&gt; plugin. Running the following in the root folder of your Cryogen project will compile your resources to &lt;code&gt;resources/public&lt;/code&gt; then start the site at &lt;a href='http://localhost:3000'&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's it for getting the basic template up and running. Additional docs can be found on the &lt;a href='https://github.com/lacarmen/cryogen'&gt;github page&lt;/a&gt;.&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;So here we go! Another attempt at maintaining a blog - this time using Cryogen. It's actually my first noteworthy project using Clojure and hopefully that will encourage me to write here regularly. I'd also like to give a huge thanks to &lt;a href='http://yogthos.net/'&gt;Yogthos&lt;/a&gt; for helping me out with my first project!&lt;/p&gt;
</description>
<pubDate>
Wed, 12 Nov 2014 00:00:00 -0500
</pubDate>
</item>
</channel>
</rss>
